class Node:
    def _init_(self, data):
        self.left: Node = None
        self.right: Node = None
        self.data: int = data

class BinaryTree:
    def _init_(self):
        self.root: Node = None
    
    def _str_(self):
        res = ''
        if self.root is None:
            return 'BT is Empty'
def print_leaf_nodes(root):
    if root is None:
        return

    if root.left is None and root.right is None:
        print(root.data, end=" ")

    print_leaf_nodes(root.left)
    print_leaf_nodes(root.right)


root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)
root.left.left.left = Node(8)
root.left.left.right = Node(9)
root.left.right.left = Node(10)
root.left.right.right = Node(11)
root.right.left.left = Node(12)
root.right.left.right = Node(13)
root.right.right.left = Node(14)
root.right.right.right = Node(15)


print_leaf_nodes(root)









# Q no- 4

def sumofdigits(n:int)->int: 
    if n == 0: 
        return 0
    else: 
        return n % 10 + sumofdigits(n // 10) 
n=12345
print(sumofdigits(n))








#Q no -5

def checkprime(n:int, divisor = 2) ->bool: 
    if n <= 1: 
        return False
    if divisor == n: 
        return True
    if n % divisor == 0: 
        return False
    return checkprime(n, divisor + 1) 
n = 29
print(checkprime(n))
